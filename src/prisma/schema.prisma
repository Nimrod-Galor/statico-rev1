// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// after change to schems run: npx prisma generate
// npx prisma format

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique @default("subscriber")
  description String
  default     Boolean @default(false)
  User        User[]
}

model User {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime          @default(now())
  email                    String            @unique
  password                 String
  salt                     String
  userName                 String?
  role                     Role              @relation(fields: [roleId], references: [id])
  roleId                   String            @db.ObjectId
  products                 Product[]
  comments                 Comment[]
  token                    RememberMeToken[]
  emailVerified            Boolean           @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?
}

model RememberMeToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
}

model Product {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime          @default(now())
  metatitle       String?
  metadescription String?
  slug            String?  @unique
  title           String
  body            String
  publish         Boolean @default(false)
  viewCount       Int       @default(0)
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String    @db.ObjectId
  comments        Comment[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  comment   String
  publish   Boolean   @default(false)
  product      Product      @relation(fields: [productId], references: [id])
  productId    String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  parentId  String?   @db.ObjectId // This field will hold the ID of the parent comment, if any
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToComment")
  likes     Int       @default(0)
  dislikes  Int       @default(0)
}


